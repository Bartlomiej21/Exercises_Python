import numpy as np
import pandas as pd

x = ['a','b','c','d','e']
y = [i for i in range(1,6)]
z = {1:'a',2:'b',3:'c',4:'d',5:'e'}

a = pd.Series(x,y) #(data, index)
a[2:]  # slicing lists
# lists can be added if indexes are the same, integers of data will follow


A = [1,2,3,4]
B = [5,6,7,8]
C = [9,0,1,2]
D = [3,4,5,6]
E = [7,8,9,0]

df = pd.DataFrame([A,B,C,D,E],['a','b','c','d','e'],['W','X','Y','Z'])

df1= pd.DataFrame([A,B,C,D,E],['a','b','c','d','e'],['A','B','C','D'])
df1['E']= df['Y']+df['Z']
print(df1)
#df1 = df1.drop('E',1)
#print(df1.drop('C',1))
#df1 = df1.append(df)
plus = df1.iloc[4]+df1.iloc[0]  # iloc pozwala "dostać się do wiersza"
df2 = df1.append(plus,ignore_index=True)
#print(df1)
#print(df2)
# należy pamiętać, że df2 będzie miał inny index niestety 

df1.loc['d','A']


# preparujemy na szybko wine_df, bo nie mamy pliku źródłówego
col = ['fixed_acidity', 'volatile_acidity', 'citric_acid', 'residual_sugar', 'chlorides', 'free_sulfur_dioxide', 'total_sulfur_dioxide','density','pH','sulphates', 'alcohol', 'quality' ]
index_mine = ['a','b','c','d','e']

x = np.arange(60).reshape(5,12)
#print(x)

wine_df = pd.DataFrame(x,index=index_mine,columns=col)


wine_df['fixed_acidity']
wine_df.fixed_acidity 

# kilka z kolumn (pamiętać o nawiasach)
wine_list = wine_df[['fixed_acidity', 'volatile_acidity', 'citric_acid']]

# liczba i rodzaj danych w kolumnach
wine_df.dtypes.value_counts()
# można wybrać określony typ danych
wine_df.select_dtypes(include=['float'])

#conditional accessing
print(df)
df[df["W"]>8]
df[df['W']>3][['W','X']]  # cóż za nieciekawa konstrukcja - tylko kolumny w i x będą brane pod uwagę

# ćw: zrobić tak, by wydrukowało tylko d używając < i >

df[(df['X']>3) & (df['Y']<6)]


d = {'a':[1,2,3,4,5],'b':[6,7,8,9,np.nan],'c':[np.nan,np.nan,3,4,5]}
df = pd.DataFrame(d)
print(df)
df.dropna(axis=0)  # samo to nie zmienia wartości df
df.dropna(thresh=3)  # thresh - require n non-na values

df = df.fillna(df.mean(axis=0))
print(df)


# this is a very simple dict because it's just for training
p = {'item':['mouse','pc','monitor'],'days':['mon','tuesday','wed'],'price':[50,2000,400]}
df = pd.DataFrame(p)
x = df.groupby('item')
x.mean()
x.describe()  # zestaw statystyk (std,min,max,quartile,mean)

y1 = {'a':[1,2,3]}
y2 = {'b':[8,3,4]}
y1df = pd.DataFrame(y1) 
y2df = pd.DataFrame(y2) 

y1df.join(y2df,how='left')  # left works probably like sql left join
print(y1df)
print(y1df.join(y2df,how='left'))




